# -*- org-confirm-babel-evaluate: nil -*-
#+TITLE: export_readme
#+EXPORT_FILE_NAME: ../README
#+OPTIONS: title:nil author:nil email:nil toc:t |:t ^:nil
#+INCLUDE: "../project.org::*Header"

#+BEGIN_SRC emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-export-filter-final-output-functions)
  (defun my-double-blank-line-filter (output backend info)
    (replace-regexp-in-string "^\n+" "\n" output))
  (add-to-list 'org-export-filter-final-output-functions
               'my-double-blank-line-filter)
  (defun my-result-keyword-filter (output backend info)
    (replace-regexp-in-string "^#[+]RESULTS:.*\n" "" output))
  (add-to-list 'org-export-filter-final-output-functions
               'my-result-keyword-filter)
  (defun my-export-filename-filter (output backend info)
    (replace-regexp-in-string "^#[+]EXPORT_FILE_NAME:.*\n" "" output))
  (add-to-list 'org-export-filter-final-output-functions
               'my-export-filename-filter)
#+END_SRC

* File Information                                                 :noexport:
  This file generates documentation into the desired format when it is exported
  by emacs org-mode.

* File Usage                                                       :noexport:
  1. Install dependencies:
     - texlive-latex-extra #To generate pdf files.
       #+BEGIN_SRC sh :exports none
         sudo apt-get install texlive-latex-extra
       #+END_SRC
  2. Export this file to desired format.

* Repository Information

  - Name :: {{{name}}}
  - Version :: {{{version}}}
  - License :: {{{license}}}
  - URL :: {{{url}}}
  - Author :: {{{author}}}
  - Email :: {{{email}}}

  #+INCLUDE: "../project.org::*Description"

* Images

  #+BEGIN_SRC sh :exports results :results raw
    TOP=../images/top.png
    if [ -f $TOP ]; then
      echo "[[file:./images/top.png]]\n"
    fi
    BOTTOM=../images/bottom.png
    if [ -f $BOTTOM ]; then
      echo "[[file:./images/bottom.png]]\n"
    fi
  #+END_SRC

* Schematic

  #+BEGIN_SRC sh :exports results :results raw
    for FILEPATH in ../schematic/*.pdf; do
      FILENAME=${FILEPATH##*/}
      echo "[[file:./schematic/$FILENAME][./schematic/$FILENAME]]\n"
    done
  #+END_SRC
  #+BEGIN_SRC sh :exports results :results raw
    for FILEPATH in ../schematic/images/*.png; do
      FILENAME=${FILEPATH##*/}
      echo "[[file:./schematic/images/$FILENAME]]\n"
    done
  #+END_SRC

* Gerbers

  #+BEGIN_SRC sh :exports results :results raw
    GERBER_ZIP_COUNT=0;
    for FILEPATH in ../gerbers/*.zip; do
      FILENAME=${FILEPATH##*/}
      if [ "$FILENAME" != "*.zip" ]
      then
        if [ "$GERBER_ZIP_COUNT" -eq "0" ]
        then
          echo "Send gerbers zip file to your favorite PCB manufacturer for fabrication.\n"
        fi
        GERBER_ZIP_COUNT=$((GERBER_ZIP_COUNT + 1))
        echo "[[file:./gerbers/$FILENAME][./gerbers/$FILENAME]]\n"
      fi
    done
  #+END_SRC
  #+BEGIN_SRC sh :exports results :results raw
    for FILEPATH in ../gerbers/images/*.png; do
      FILENAME=${FILEPATH##*/}
      if [ "$FILENAME" != "*.png" ]
      then
        echo "[[file:./gerbers/images/$FILENAME]]\n"
      fi
    done
  #+END_SRC

* Bill of Materials

** PCB Parts

   #+INCLUDE: "../bom/bom.org::pcb-parts"

** Supplemental Parts

   #+INCLUDE: "../bom/supplemental_bom.org::supplemental-parts"

** Vendor Parts Lists

   #+BEGIN_SRC sh :exports results :results raw
     for FILEPATH in ../bom/*parts.csv; do
       FILENAME=${FILEPATH##*/}
       echo "[[file:./bom/$FILENAME][./bom/$FILENAME]]\n"
     done
   #+END_SRC
* Supplemental Documentation

  #+INCLUDE: "../project.org::*Assembly Instructions"
